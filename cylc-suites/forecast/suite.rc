#!jinja2
%include settings.rc

#User-settable variables (locations of data files and such) are in the settings.rc file included above
#These appear in this suite.rc file as for example: {{ initial_cycle_point }} 

title = "eWaterCycle Forecast"

[cylc]
UTC mode = True

[scheduling]
    initial cycle point = {{ initial_cycle_point }}
    final cycle point = {{ final_cycle_point }}
    [[special tasks]]
        clock-trigger = download_gfs(PT2H), download_gefs(PT2H), download_hsaf(PT10H)
    [[dependencies]]
        [[[R1]]]  # Initial cycle point.
            # get initial state from somewhere (preferable spinup of sorts)
            graph = bootstrap_initial_state => load_initial_state
        [[[P1D]]] # Main forecast workflow 
            graph = """
                #the forecast depends on initial state from the previous forecast (written in create_result)
                save_state[-P1D] => load_initial_state
                load_initial_state => run_forecast

                #we use high-res gfs forcings
                download_gfs => preprocess_deterministic_forcing

                #and the gefs ensemble for variation across ensemble members
                download_gefs => preprocess_ensemble_forcing => run_forecast

                #we upscale the ensemble using the deterministic high-res focing
                preprocess_deterministic_forcing => preprocess_ensemble_forcing

                #we assimilate soil moisture into our model
                download_hsaf => preprocess_observations => run_forecast

                #we create config files for the model and da system
                create_pcrglobwb_config => run_forecast
                create_openda_config => run_forecast

                #after the forecast, we create the final output, save state, upload_output, and archive
                run_forecast => create_result => upload_result
                run_forecast => save_state => archive_cycle
                create_result => archive_cycle
            """

[runtime]
    [[root]]  # Inherited by all tasks.
        #Default script will fail to catch unset task scripts
        script = fail.sh

        #Pre-script cleans working directory for the tasks, creates shared IO directory.
        pre-script = pre-script.sh
        [[[environment]]]
            #Date formats used in almost all scripts
            ISO_DATE_EXT = $(cylc cycle-point --template=CCYY-MM-DD)
            ISO_DATE = $(cylc cycle-point --template=CCYYMMDD)
            REFERENCE_CYCLE = $(cylc util cycletime --offset-days=-1)
            IO_DIR = $CYLC_SUITE_SHARE_DIR/$CYLC_TASK_CYCLE_POINT
            REF_IO_DIR = $CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE

    [[bootstrap_initial_state]]
        script = bootstrap_initial_state.sh

        [[[environment]]]
            #Initial state file. Should match initial cycle point.
            BOOTSTRAP_INITIAL_STATE_FILE = {{ bootstrap_initial_state_file }}

            #State file that would have been written by previous cycle, and is now
            #Written using this special bootstrap task
            REFERENCE_INITIAL_STATE_DIR=$CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE/postprocess
            REFERENCE_INITIAL_STATE_FILE=$REFERENCE_INITIAL_STATE_DIR/state.tar.gz

    [[DOWNLOAD]]
    [[download_gfs, download_gefs, download_hsaf]]
        inherit = DOWNLOAD
        #since downloaded files may be unavailable after a few days, we overwrite files rather than wipe work dirs.
        pre-script = pre-script-keep-workdir.sh

    [[download_hsaf]]
        script = download_hsaf.sh

    [[download_gfs]]
        script = download_gfs.sh

    [[download_gefs]]
        script = download_gefs.sh

    [[PREPROCESS]]
    [[preprocess_deterministic_forcing, preprocess_ensemble_forcing, preprocess_observations, load_initial_state]]
        inherit = PREPROCESS

    [[preprocess_observations]]
        script = preprocess_observations.sh

        [[[environment]]]
            OBSERVATION_MASK = {{ observation_mask }}
            OBSERVATION_TARGET_GRID = {{ observation_target_grid }}

    [[preprocess_deterministic_forcing]]
        script = preprocess_deterministic_forcing.sh

    [[preprocess_ensemble_forcing]]
        script = preprocess_ensemble_forcing.sh

        [[[environment]]]
            MODEL_GRID = {{ model_grid }}

    [[load_initial_state]]
        script = load_initial_state.sh

        [[[environment]]]
            INITIAL_STATE_FILE=$CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE/postprocess/state.tar.gz

    [[FORECAST]]
    [[create_pcrglobwb_config, create_openda_config, run_forecast]]
        inherit = FORECAST

        [[[environment]]]
            ENSEMBLE_MEMBER_COUNT = {{ ensemble_member_count }}

    [[create_pcrglobwb_config]]
        script = create_pcrglobwb_config.py

        [[[environment]]]
            PCRGLOBWB_CONFIG_TEMPLATE = {{ pcrglobwb_config_template }}
            STARTTIME = $ISO_DATE_EXT
            ENDTIME = $(cylc util cycletime --offset-days=8 --template=CCYY-MM-DD)

            #this location should vary from one installation to the next
            HYDROWORLD_LOCATION = {{ hydroworld_location }}

    [[create_openda_config]]
        script = create_openda_config.py

        [[[environment]]]
            OPENDA_CONFIG_TEMPLATE_DIR = {{ openda_config_template_dir }}
            STATE_WRITE_TIME = ${ISO_DATE}0000
            MODEL_HOSTS = {{ model_hosts }}

    [[run_forecast]]
        script = run_forecast.sh

        [[[environment]]]
            PCRGLOBWB_MODEL_DIR = {{ pcrglobwb_model_dir }}
            OPENDA_DIR = {{ openda_dir }}

    [[POSTPROCESS]]
    [[create_result, upload_result, save_state, archive_cycle]]
        inherit = POSTPROCESS

    [[create_result]]
        script = create_result.sh

        [[[environment]]]
            UNCERTAINTY_TEMPLATE_FILE = $CYLC_SUITE_DEF_PATH/misc/uncertaintyTemplate.nc

    [[save_state]]
        script = save_state.sh

    [[upload_result]]
        script = upload_result.sh

    [[archive_cycle]]
        script = archive_cycle.sh

        [[[environment]]]
            ARCHIVE_DIR = {{ archive_dir }}

[visualization]
    default node attributes = "style=filled", "shape=ellipse"
    [[node attributes]]
        load_initial_state = "fillcolor=#d99aff"
        DOWNLOAD = "fillcolor=#00c798"
        PREPROCESS = "fillcolor=#ffcc00"
        FORECAST = "fillcolor=#00b4fd"
        POSTPROCESS = "fillcolor=#ff5966"
