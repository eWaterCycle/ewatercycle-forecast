title = "eWaterCycle Forecast"
[cylc]
#    cycle point format = %Y-%m-%d
UTC mode = True

[scheduling]
    initial cycle point = 2016-08-08
    final cycle point = 2016-08-09
    [[special tasks]]
        clock-trigger = download_gfs(PT2H), download_gefs(PT2H), download_hsaf(PT10H)
    [[dependencies]]
        [[[R1]]]  # Initial cycle point.
            # get initial state from somewhere (preferable spinup of sorts)
            graph = bootstrap_initial_state => load_initial_state
        [[[P1D]]] # Main forecast workflow 
            graph = """
                #the forecast depends on initial state from the previous forecast (written in create_result)
                create_result[-P1D] => load_initial_state
                load_initial_state => run_forecast

                #we use high-res gfs forcings
                download_gfs => preprocess_deterministic_forcing

                #and the gefs ensemble for variation across ensemble members
                download_gefs => preprocess_ensemble_forcing => run_forecast

                #we upscale the ensemble using the deterministic high-res focing
                preprocess_deterministic_forcing => preprocess_ensemble_forcing

                #we assimilate soil moisture into our model
                download_hsaf => preprocess_observations => run_forecast

                #we create config files for the model and da system
                create_pcrglobwb_config => run_forecast
                create_openda_config => run_forecast

                #after the forecast, we create the final output, and archive/upload
                run_forecast => create_result => archive_cycle
                create_result => upload_result
            """

[runtime]
    [[root]]  # Inherited by all tasks.
        script = fail.sh
        pre-script = pre-script.sh
        [[[environment]]]
            #Date formats used in almost all scripts
            ISO_DATE_EXT = $(cylc cycle-point --template=CCYY-MM-DD)
            ISO_DATE = $(cylc cycle-point --template=CCYYMMDD)
            REFERENCE_CYCLE = $(cylc util cycletime --offset-days=-1)
            IO_DIR = $CYLC_SUITE_SHARE_DIR/$CYLC_TASK_CYCLE_POINT
            REF_IO_DIR = $CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE

    [[bootstrap_initial_state]]
        script = bootstrap_initial_state.sh

        [[[environment]]]
            #some file, probably needs to be adjusted
            BOOTSTRAP_INITIAL_STATE_FILE = $HOME/ewatercycle_initial_state.tar.gz

            #state file that would have been written by previous cycl
            REFERENCE_INITIAL_STATE_DIR=$CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE/postprocess
            REFERENCE_INITIAL_STATE_FILE=$REFERENCE_INITIAL_STATE_DIR/state.tar.gz

    [[DOWNLOAD]]
    [[download_gfs, download_gefs, download_hsaf]]
        inherit = DOWNLOAD
        #since downloaded files may be unavailable after a few days, we overwrite files rather than wipe work dirs.
        pre-script = pre-script-keep-workdir.sh

    [[download_hsaf]]
        script = download_hsaf.sh
        [[[environment]]]
            #load credentials from file (format should be e.mail%40domain.com:p3ssw3rd)
            CREDENTIALS = $(cat ~/.hsaf_credentials)

    [[download_gfs]]
        script = download_gfs.sh

    [[download_gefs]]
        script = download_gefs.sh

    [[PREPROCESS]]
    [[preprocess_deterministic_forcing, preprocess_ensemble_forcing, preprocess_observations, load_initial_state]]
        inherit = PREPROCESS
        [[[environment]]]
            MODEL_GRID_MASK = $CYLC_SUITE_DEF_PATH/grids/30min.grid.model.mask.nc

    [[preprocess_observations]]
        script = preprocess_observations.sh

    [[preprocess_deterministic_forcing]]
        script = preprocess_deterministic_forcing.sh

    [[preprocess_ensemble_forcing]]
        script = preprocess_ensemble_forcing.sh

    [[load_initial_state]]
        script = load_initial_state.sh

        [[[environment]]]
            INITIAL_STATE_FILE=$CYLC_SUITE_SHARE_DIR/$REFERENCE_CYCLE/postprocess/state.tar.gz

    [[FORECAST]]
    [[create_pcrglobwb_config, create_openda_config, run_forecast]]
        inherit = FORECAST

    [[create_pcrglobwb_config]]
        script = create_pcrglobwb_config.py

        [[[environment]]]
            CONFIG_TEMPLATE = $CYLC_SUITE_DEF_PATH/pcrglobwb_config_templates/default-30min.ini
            STARTTIME = $ISO_DATE_EXT
            ENDTIME = $(cylc util cycletime --offset-days=8 --template=CCYY-MM-DD)

            #this location should vary from one installation to the next
            INPUTDIR = $HOME/hydroworld

    [[create_openda_config]]
        script = create_openda_config.py

        [[[environment]]]
            CONFIG_TEMPLATE_DIR = $CYLC_SUITE_DEF_PATH/openda_configurations/openda_config_template_30

    [[run_forecast]]
        script = run_forecast.sh

        [[[environment]]]
        PCRGLOBWB_MODEL_DIR = $HOME/ewatercycle/PCR-GLOBWB

    [[POSTPROCESS]]
    [[create_result, upload_result, archive_cycle]]
        inherit = POSTPROCESS


[visualization]
    default node attributes = "style=filled", "shape=ellipse"
    [[node attributes]]
        load_initial_state = "fillcolor=#d99aff"
        DOWNLOAD = "fillcolor=#00c798"
        PREPROCESS = "fillcolor=#ffcc00"
        FORECAST = "fillcolor=#00b4fd"
        POSTPROCESS = "fillcolor=#ff5966"
